Object subclass: #NameOfSubclass	instanceVariableNames: 'timeStamps'	classVariableNames: ''	package: 'cmb-Freerun-Uncategorized'!TestCase subclass: #ButtonpressInfoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun-Tests'!!ButtonpressInfoTest commentStamp: '<historical>' prior: 0!A ButtonpressInfoTest is a test class for testing the behavior of ButtonpressInfo!!ButtonpressInfoTest methodsFor: 'test' stamp: 'cmb 3/12/2020 08:03'!testPrintString	self 		assert:  			(ButtonpressInfo new: '12_34_56_789') printString 				equals:			'12_34_56_789'! !TestCase subclass: #FreerunRunTest	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun-Tests'!!FreerunRunTest commentStamp: '<historical>' prior: 0!A FreerunRunTest is a test class for testing the behavior of FreerunRun!!FreerunRunTest methodsFor: 'test' stamp: 'cmb 3/12/2020 07:55'!testDurationFirst1		| run |	run := FreerunRun new . 	run 		addButtonpressinfo: (ButtonpressInfo new: '01_15_47_307') ;		addButtonpressinfo: (ButtonpressInfo new: '01_15_47_961' ).			self 		assert: run durationFirst 		equals: 961 - 307 .! !TestCase subclass: #TBCBlogTest	instanceVariableNames: 'blog post first'	classVariableNames: ''	package: 'cmb-Freerun-Tests'!!TBCBlogTest methodsFor: 'initialization' stamp: 'cmb 2/27/2020 15:58'!setUp 	blog := TBCBlog current .	blog removeAllPosts .	first := TBCPost title: 'Ttl' text: 'txt' category: 'cat1' .	blog writeBlogPost: first .	post := (TBCPost title: 'other' text: 'txt2' category:  'cat2' ) beVisible .! !!TBCBlogTest methodsFor: 'initialization' stamp: 'cmb 2/27/2020 15:59'!tearDown 	TBCBlog reset ! !!TBCBlogTest methodsFor: 'initialization' stamp: 'cmb 2/27/2020 16:01'!testAddBlogPost	blog writeBlogPost: post .	self assert: blog size equals: 2! !Object subclass: #FreerunState	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun-Base'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreerunState class	instanceVariableNames: ''!!FreerunState class methodsFor: 'as yet unclassified' stamp: 'cmb 3/12/2020 19:21'!stateName 	^ self description! !!FreerunState class methodsFor: 'state' stamp: 'cmb 3/10/2020 07:40'!receiveButtonpressInfo: aDateAndTime 	self subclassResponsibility ! !!FreerunState class methodsFor: 'action' stamp: 'cmb 3/7/2020 22:27'!receiveTimeStamp: aDateAndTime on: aFreerunContest 	self subclassResponsibility ! !!FreerunState class methodsFor: 'accessing' stamp: 'cmb 3/12/2020 19:25'!description 	self subclassResponsibility ! !Object subclass: #TBCBlog	instanceVariableNames: 'posts'	classVariableNames: ''	package: 'cmb-Freerun-Base'!!TBCBlog methodsFor: 'initialization' stamp: 'cmb 2/27/2020 15:48'!initialize	super initialize .	posts := OrderedCollection new.! !!TBCBlog methodsFor: 'initialization' stamp: 'cmb 2/27/2020 17:48'!size	^ posts size ! !!TBCBlog methodsFor: 'as yet unclassified' stamp: 'cmb 2/27/2020 16:03'!writeBlogPost: aTBCPost 	posts add: aTBCPost ! !!TBCBlog methodsFor: 'as yet unclassified' stamp: 'cmb 2/27/2020 16:02'!removeAllPosts	posts := OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBCBlog class	instanceVariableNames: 'uniqueInstance'!!TBCBlog class methodsFor: 'initialization' stamp: 'cmb 2/27/2020 15:50'!reset 	uniqueInstance := nil! !!TBCBlog class methodsFor: 'initialization' stamp: 'cmb 2/27/2020 15:51'!initialize 	self reset! !!TBCBlog class methodsFor: 'initialization' stamp: 'cmb 2/27/2020 15:51'!current 	^ uniqueInstance ifNil: [ uniqueInstance := self new ]! !Object subclass: #TBCPost	instanceVariableNames: 'title text date category visible'	classVariableNames: ''	package: 'cmb-Freerun-Base'!!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:45'!visible: aBoolean	visible := aBoolean ! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:44'!date	^ date! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:44'!category	^ category! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:42'!title: aString	title := aString ! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:44'!date: anObject	date := anObject! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:44'!category: anObject	category := anObject! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:42'!title	^ title! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:42'!text 	^ text! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:43'!text: aString	text := aString ! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 14:44'!visible	^ visible! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 15:33'!beVisible	visible := true! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 15:37'!initialize 	super initialize .	self category: TBCPost unclassifiedTag .	self date: Date today .	self beInvisible ! !!TBCPost methodsFor: 'accessing' stamp: 'cmb 2/27/2020 15:33'!beInvisible	visible := false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBCPost class	instanceVariableNames: ''!!TBCPost class methodsFor: 'as yet unclassified' stamp: 'cmb 2/27/2020 15:36'!unclassifiedTag	^ 'Unclassified'! !!TBCPost class methodsFor: 'as yet unclassified' stamp: 'cmb 2/27/2020 15:40'!title: aTitle text: aText	^ self new 		title: aTitle ;		text: aText ;		yourself ! !!TBCPost class methodsFor: 'as yet unclassified' stamp: 'cmb 2/27/2020 15:41'!title: aTitle text: aText category: aCategory	^ (self title: aTitle text: aText) 		category: aCategory ;		yourself ! !TBCBlog initialize!Object subclass: #ButtonpressInfo	instanceVariableNames: 'request hours minutes seconds milliseconds'	classVariableNames: ''	package: 'cmb-Freerun'!!ButtonpressInfo methodsFor: 'printing' stamp: 'cmb 3/12/2020 08:01'!printString 	^ hours asString , '_'		, minutes asString  , '_'		, seconds asString  , '_'		, milliseconds asString  ! !!ButtonpressInfo methodsFor: 'accessing' stamp: 'cmb 3/10/2020 08:21'!timeStamp	^ request  ! !!ButtonpressInfo methodsFor: 'accessing' stamp: 'cmb 3/12/2020 07:55'!request: aRequestContext 	| parts |	parts := aRequestContext substrings: '_' .	hours := (parts at: 1) asNumber .	minutes := (parts at: 2) asNumber .	seconds := (parts at: 3) asNumber .	milliseconds := (parts at: 4) asNumber .	! !!ButtonpressInfo methodsFor: 'accessing' stamp: 'cmb 3/11/2020 22:15'!millisecs	^ (hours * 60) 		+ minutes			* 60 		+ seconds 			* 1000		+ milliseconds ! !!ButtonpressInfo methodsFor: 'accessingas yet unclassified' stamp: 'cmb 3/11/2020 22:02'!request	^ request asNumber! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ButtonpressInfo class	instanceVariableNames: ''!!ButtonpressInfo class methodsFor: 'instance creation' stamp: 'cmb 3/11/2020 22:05'!new: aRequestContext 	"aRequestContext is something like '01_15_47_307' at this moment. "
	^ self new 		request: aRequestContext ! !!ButtonpressInfo class methodsFor: 'instance creation' stamp: 'cmb 3/12/2020 07:45'!newFromRequestContext: aWARequestContext	| str parts last |	str := aWARequestContext printString . 	parts := (str substrings: '''') at: 2.	last := (parts substrings: '/') last.	^ self new: last ! !Object subclass: #FreerunContest	instanceVariableNames: 'runs state currentRun'	classVariableNames: ''	package: 'cmb-Freerun'!!FreerunContest methodsFor: 'instance creation' stamp: 'cmb 3/10/2020 07:40'!receiveButtonpressInfo: aButtonpressInfo	"		if freerunState is WaitingFor1stButton -> create new FreerunRun-instance	"	self freerunState receiveTimeStamp: aButtonpressInfo on: self .					! !!FreerunContest methodsFor: 'actions' stamp: 'cmb 3/10/2020 06:16'!startNextRun
	currentRun := FreerunRun new .	self runs add: currentRun! !!FreerunContest methodsFor: 'accessing' stamp: 'cmb 3/7/2020 22:09'!runs	^ runs		ifNil: [ runs := OrderedCollection with: FreerunRun new ]! !!FreerunContest methodsFor: 'accessing' stamp: 'cmb 3/10/2020 06:17'!currentRun		^ currentRun ifNil: 		[ self startNextRun . 		currentRun ]		! !!FreerunContest methodsFor: 'accessing' stamp: 'cmb 3/7/2020 21:13'!state	^ state		ifNil: [ state := FreerunStateWaitForStart ]! !!FreerunContest methodsFor: 'accessing' stamp: 'cmb 3/7/2020 21:12'!stateName	^ self state stateName ! !!FreerunContest methodsFor: 'accessing' stamp: 'cmb 3/7/2020 22:55'!currentRunInfo	^ self state asString 		, ' - '		, self currentRun info ! !!FreerunContest methodsFor: 'accessing' stamp: 'cmb 3/7/2020 22:44'!freerunState	^ state ifNil: [ state := FreerunStateWaitForStart ]! !!FreerunContest methodsFor: 'state' stamp: 'cmb 3/7/2020 22:34'!goState: aClass 	state := aClass ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreerunContest class	instanceVariableNames: 'currentContest'!!FreerunContest class methodsFor: 'singleton' stamp: 'cmb 3/7/2020 22:43'!currentContest	^ currentContest
		ifNil: [ currentContest := self new ]! !!FreerunContest class methodsFor: 'reset' stamp: 'cmb 3/7/2020 22:21'!reset	currentContest := nil! !Object subclass: #FreerunRun	instanceVariableNames: 'timeStamps'	classVariableNames: ''	package: 'cmb-Freerun'!!FreerunRun methodsFor: 'accessing' stamp: 'cmb 3/12/2020 07:47'!addButtonpressinfo: aButtonpressInfo  	self timeStamps add: aButtonpressInfo ! !!FreerunRun methodsFor: 'accessing' stamp: 'cmb 3/14/2020 17:41'!durationBetween: aButtonpressInfo and: aButtonpressInfo2 	^ aButtonpressInfo2 millisecs - aButtonpressInfo millisecs ! !!FreerunRun methodsFor: 'accessing' stamp: 'cmb 3/14/2020 17:44'!durationFirst	^ self timeStamps size > 1 		ifTrue: [ 			((self 				durationBetween: (timeStamps at: 1 )  				and: (timeStamps at: 2 ))					 / 1000 ) asFloat   ]		ifFalse: [ ' - - ' ] ! !!FreerunRun methodsFor: 'accessing' stamp: 'cmb 3/7/2020 23:17'!info	| numTimeStampsInRun str |	numTimeStampsInRun := self timeStamps size .
	str := WriteStream on: String new.
	numTimeStampsInRun = 1		ifTrue: [ 			str nextPutAll: 'Started' ] .
	numTimeStampsInRun = 2		ifTrue: [ 			str 				nextPutAll: 'Halfway time: ' ; 				nextPutAll: '3 s.' ] .
	numTimeStampsInRun = 3		ifTrue: [ 			str 				nextPutAll: 'End time: ' ;				nextPutAll: '15 secs' ] .
	str nextPutAll: '--------' .	str nextPutAll: self class name asString  ; cr . 	self timeStamps do: [ :stamp | str nextPutAll: stamp asString ; nextLine  ] .
	str close .	^ str contents 		, ' - '
		, numTimeStampsInRun asString! !!FreerunRun methodsFor: 'accessing' stamp: 'cmb 3/7/2020 22:17'!timeStamps	^ timeStamps ifNil: [ timeStamps := OrderedCollection new ]! !!FreerunRun methodsFor: 'accessing' stamp: 'cmb 3/14/2020 17:46'!durationSecond	^ self timeStamps size > 2 		ifTrue: [ 			((self 				durationBetween: (timeStamps at: 1 )  				and: (timeStamps at: 3 ))					 / 1000 ) asFloat   ]		ifFalse: [ ' - - ' ] ! !!FreerunRun methodsFor: 'as yet unclassified' stamp: 'cmb 3/7/2020 21:10'!contestState	^ self state! !FreerunState subclass: #FreerunStateWaitFor3rd	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreerunStateWaitFor3rd class	instanceVariableNames: ''!!FreerunStateWaitFor3rd class methodsFor: 'accessing' stamp: 'cmb 3/7/2020 18:31'!nextFreerunState	^ FreerunStateWaitForStart  ! !!FreerunStateWaitFor3rd class methodsFor: 'accessing' stamp: 'cmb 3/10/2020 07:36'!receiveTimeStamp: aDateAndTime on: aFreerunContest 	aFreerunContest startNextRun .	aFreerunContest currentRun addButtonpressinfo: aDateAndTime . 	aFreerunContest goState: FreerunStateWaitForStart   ! !!FreerunStateWaitFor3rd class methodsFor: 'accessing' stamp: 'cmb 3/12/2020 19:23'!description 	^ 'Second half'! !FreerunState subclass: #FreerunStateWaitForMiddle	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreerunStateWaitForMiddle class	instanceVariableNames: ''!!FreerunStateWaitForMiddle class methodsFor: 'action' stamp: 'cmb 3/10/2020 07:36'!receiveTimeStamp: aDateAndTime on: aFreerunContest 	aFreerunContest currentRun addButtonpressinfo: aDateAndTime . 	aFreerunContest goState: FreerunStateWaitFor3rd  ! !!FreerunStateWaitForMiddle class methodsFor: 'action' stamp: 'cmb 3/12/2020 19:26'!description 	^ 'First half'! !FreerunState subclass: #FreerunStateWaitForStart	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreerunStateWaitForStart class	instanceVariableNames: ''!!FreerunStateWaitForStart class methodsFor: 'action' stamp: 'cmb 3/10/2020 07:36'!receiveTimeStamp: aDateAndTime on: aFreerunContest	aFreerunContest currentRun addButtonpressinfo: aDateAndTime . 	aFreerunContest goState: FreerunStateWaitForMiddle ! !!FreerunStateWaitForStart class methodsFor: 'as yet unclassified' stamp: 'cmb 3/7/2020 18:30'!nextFreerunState	^ FreerunStateWaitForMiddle ! !!FreerunStateWaitForStart class methodsFor: 'accessing' stamp: 'cmb 3/12/2020 19:26'!description 	^ 'Press button to start.'! !WAComponent subclass: #WAFreerunBtn	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun'!!WAFreerunBtn methodsFor: 'accessing' stamp: 'cmb 3/7/2020 22:00'!contest	^ FreerunContest currentContest! !!WAFreerunBtn methodsFor: '*Alien-Core' stamp: 'cmb 3/7/2020 22:42'!reset	FreerunContest reset! !!WAFreerunBtn methodsFor: 'rendering' stamp: 'cmb 3/11/2020 21:36'!sendButtonpressInfo: aRequestContext to: aContest 	aContest receiveButtonpressInfo: 		(ButtonpressInfo newFromRequestContext: aRequestContext)  ! !!WAFreerunBtn methodsFor: 'rendering' stamp: 'cmb 3/12/2020 08:13'!renderContentOn: html 	"serverTimeStamp := DateAndTime now ." 	"newTimeStamp := self requestContext asString ."	self sendButtonpressInfo: self requestContext to: self contest .	"self contest receiveButtonpressInfo: newTimeStamp ."	html heading: self contest stateName  .	html space.	html anchor		callback: [ self reset ];		with: 'reset' .	html space.	html text: self requestContext asString .	html space .	"self requestContext asString inspect . "
	Transcript cr; show: self htmlText .	"html text: self htmlText . "! !!WAFreerunBtn methodsFor: 'rendering' stamp: 'cmb 3/9/2020 17:33'!htmlText 	^ self contest stateName 		, self requestContext asString		", newTimeStamp  asString  " . ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAFreerunBtn class	instanceVariableNames: ''!!WAFreerunBtn class methodsFor: 'rendering' stamp: 'cmb 3/7/2020 13:47'!canBeRoot 
 	^ true! !!WAFreerunBtn class methodsFor: 'accessing' stamp: 'cmb 3/7/2020 19:53'!stateName	^ self currentRun stateName ! !WAComponent subclass: #WAFreerunTimes	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun'!!WAFreerunTimes methodsFor: 'rendering' stamp: 'cmb 3/14/2020 17:36'!renderContentOn: html 	| contest |	contest := FreerunContest currentContest .
	html heading:  'Times @ ', self contest stateName  .	html space.	html anchor		callback: [ self reset ];		with: 'reset' .
	html space.	"html lineBreakOpportunity ."	html paragraph: contest currentRunInfo .	self renderTimeOn: html forRun: contest currentRun .	html space .	html paragraph 		script: (html jQuery this load 			html: [ :r | self renderTimeOn: r ];			interval: 1 seconds );		with: [ self renderTimeOn: html ]! !!WAFreerunTimes methodsFor: 'rendering' stamp: 'cmb 3/10/2020 05:27'!renderTimeOn: html	html render: DateAndTime now! !!WAFreerunTimes methodsFor: 'rendering' stamp: 'cmb 3/14/2020 17:43'!renderTimeOn: html forRun: aRun
	"html table		with: [ 			html tableRow: [ 				html html:  aContest durationFirst ] 
			html tableRow: [ 				html html:  aContest durationSecond ] ] .	"	html paragraph: 'halfway: '. 	html heading: aRun durationFirst .	html paragraph: 'Total: '. 	html heading: aRun durationSecond .! !!WAFreerunTimes methodsFor: 'actions' stamp: 'cmb 3/7/2020 22:21'!reset	FreerunContest reset! !!WAFreerunTimes methodsFor: 'accessing' stamp: 'cmb 3/9/2020 17:58'!contest	^ FreerunContest currentContest ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAFreerunTimes class	instanceVariableNames: ''!!WAFreerunTimes class methodsFor: 'testing' stamp: 'cmb 3/7/2020 21:35'!canBeRoot 
 	^ true! !WAComponent subclass: #WANtp	instanceVariableNames: ''	classVariableNames: ''	package: 'cmb-Freerun'!!WANtp methodsFor: 'rendering' stamp: 'cmb 3/12/2020 21:28'!renderContentOn: html 	| contest |	contest := FreerunContest currentContest .
	html heading: 'Times @ ', self contest stateName  .	html space.	html anchor		callback: [ self reset ];		with: 'reset' .
	html space.	html lineBreakOpportunity .	html paragraph: contest currentRunInfo .	self renderTimeOn: html forRun: contest currentRun .	html space .	html paragraph 		script: (html jQuery this load 			html: [ :r | self renderTimeOn: r ];			interval: 1 seconds );		with: [ self renderTimeOn: html ]! !!WANtp methodsFor: 'testing' stamp: 'cmb 3/12/2020 21:26'!canBeRoot	^ true! !